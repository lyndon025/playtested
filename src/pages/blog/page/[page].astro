---
import { getCollection, type CollectionEntry } from "astro:content";
import SiteOptions from "../../../site.config.mjs";
import BlogLayout from "../../../layouts/BlogLayout.astro";
import Header from "../../../components/Header.astro";
import Footer from "../../../components/Footer.astro";
import PostCard from "../../../components/PostCard.astro";
import Pagination from "../../../components/Pagination.astro";

// Posts-per-page constant
const POSTS_PER_PAGE = SiteOptions.postsPerPage ?? 10;

// Define a union type for collections
type CombinedCollectionEntry = CollectionEntry<"article"> | CollectionEntry<"submissions">;

// Required for dynamic route generation
export async function getStaticPaths() {
  const POSTS_PER_PAGE = SiteOptions.postsPerPage ?? 10;
  const articles = await getCollection("article");
  const submissions = await getCollection("submissions");
  const allContent: CombinedCollectionEntry[] = [...articles, ...submissions];
  const totalPages = Math.ceil(allContent.length / POSTS_PER_PAGE);
  return Array.from({ length: totalPages }, (_, i) => ({
    params: { page: String(i + 1) },
  }));
}

// Extract and validate `page`
const { page } = Astro.params;
const currentPage = Number(page);

// Fetch & sort newest → oldest
const articles = await getCollection("article");
const submissions = await getCollection("submissions");
const allPosts: CombinedCollectionEntry[] = [...articles, ...submissions];

const sortedPosts = allPosts.sort(
  (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
);

// Calculate pagination slice
const totalPages = Math.ceil(sortedPosts.length / POSTS_PER_PAGE);
const start = (currentPage - 1) * POSTS_PER_PAGE;
const paginated = sortedPosts.slice(start, start + POSTS_PER_PAGE);

// Bounds check
if (currentPage < 1 || currentPage > totalPages) {
  throw Astro.error(404, "Page not found");
}

// Build pageData for Pagination component
const pageData = {
  data: paginated,
  url: {
    current: `/blog/page/${currentPage}`,
    prev: currentPage > 1 ? `/blog/page/${currentPage - 1}` : undefined,
    next:
      currentPage < totalPages ? `/blog/page/${currentPage + 1}` : undefined,
  },
  currentPage,
  lastPage: totalPages,
  size: POSTS_PER_PAGE,
  total: sortedPosts.length,
};
---

<BlogLayout title={`All Posts – Page ${currentPage}`}>
  <Header showTitle />

  <h1 class="text-3xl font-bold text-center mb-8">
    All Posts (Page {currentPage} of {totalPages})
  </h1>

  <ul class="grid grid-cols-1 lg:grid-cols-2 gap-x-6 gap-y-6">
    {paginated.map((post) => <PostCard post={post} />)}
  </ul>

  <Pagination page={pageData} />

  <Footer />
</BlogLayout>