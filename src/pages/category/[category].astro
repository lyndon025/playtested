---
import { getCollection, type CollectionEntry } from "astro:content";
import SiteOptions from "../../site.config.mjs";
import BlogLayout from "../../layouts/BlogLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import PostCard from "../../components/PostCard.astro";
import Pagination from "../../components/Pagination.astro";

const POSTS_PER_PAGE = SiteOptions.postsPerPage ?? 10;
type CombinedCollectionEntry = CollectionEntry<"article"> | CollectionEntry<"submissions">;

export async function getStaticPaths() {
  const articles = await getCollection("article");
  const submissions = await getCollection("submissions");
  const allContent: CombinedCollectionEntry[] = [...articles, ...submissions];
  const allCategories = Array.from(new Set(
    allContent.map(p => p.data.category?.toLowerCase().replace(/\s+/g, "-")).filter(Boolean)
  ));
  return allCategories.map(category => ({ params: { category } }));
}

const { category } = Astro.params;
const articles = await getCollection("article");
const submissions = await getCollection("submissions");
const allContent: CombinedCollectionEntry[] = [...articles, ...submissions];

const postsInCat = allContent
  .filter(p =>
    p.data.category?.toLowerCase().replace(/\s+/g, "-") === category
  )
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

const totalPages = Math.ceil(postsInCat.length / POSTS_PER_PAGE);
const paginated = postsInCat.slice(0, POSTS_PER_PAGE);

const pageData = {
  data: paginated,
  url: {
    current: `/category/${category}`,
    prev: undefined,
    next: totalPages > 1 ? `/category/${category}/page/2` : undefined,
  },
  currentPage: 1,
  lastPage: totalPages,
  size: POSTS_PER_PAGE,
  total: postsInCat.length,
};

const isGrid = ["review", "reviews"].includes(category);
---
<BlogLayout title={`Category: ${category.replace(/-/g, " ")}`}>
  <Header showTitle />

  <h1 class="text-3xl font-bold mb-8 text-center capitalize">
    {category.replace(/-/g, " ")}
  </h1>

  {isGrid ? (
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-x-6 gap-y-6">
      {paginated.map(post => (
        <PostCard post={post} />
      ))}
    </div>
  ) : (
    <ul class="space-y-4">
      {paginated.map(post => (
        <li><PostCard post={post} /></li>
      ))}
    </ul>
  )}

  <Pagination page={pageData} />
  <Footer />
</BlogLayout>