---
import { getCollection, type CollectionEntry } from "astro:content";
import SiteOptions from "../../../../site.config.mjs";
import BlogLayout from "../../../../layouts/BlogLayout.astro";
import Header from "../../../../components/Header.astro";
import Footer from "../../../../components/Footer.astro";
import PostCard from "../../../../components/PostCard.astro";
import Pagination from "../../../../components/Pagination.astro";

const POSTS_PER_PAGE = SiteOptions.postsPerPage ?? 10;
type CombinedCollectionEntry = CollectionEntry<"article"> | CollectionEntry<"submissions">;

// 1) Generate dynamic paths for category pages 2…N
export async function getStaticPaths() {
  const POSTS_PER_PAGE = SiteOptions.postsPerPage ?? 10;
  const articles = await getCollection("article");
  const submissions = await getCollection("submissions");
  const allContent: CombinedCollectionEntry[] = [...articles, ...submissions];
  const categories = new Map<string, any[]>();
  for (const post of allContent) {
    const slug = post.data.category?.toLowerCase().replace(/\s+/g, "-");
    if (!slug) continue;
    if (!categories.has(slug)) categories.set(slug, []);
    categories.get(slug)!.push(post);
  }

  const paths: { params: { category: string; page: string } }[] = [];
  for (const [slug, posts] of categories.entries()) {
    const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE);
    for (let i = 2; i <= totalPages; i++) {
      paths.push({ params: { category: slug, page: i.toString() } });
    }
  }
  return paths;
}

// 2) Extract params and fetch posts
const { category, page } = Astro.params;
const currentPage = Number(page);

const articles = await getCollection("article");
const submissions = await getCollection("submissions");
const allContent: CombinedCollectionEntry[] = [...articles, ...submissions];

const posts = allContent
  .filter(
    (post) =>
      post.data.category?.toLowerCase().replace(/\s+/g, "-") === category
  )
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// 3) Paginate
const totalPages = Math.ceil(posts.length / POSTS_PER_PAGE);
const start = (currentPage - 1) * POSTS_PER_PAGE;
const paginated = posts.slice(start, start + POSTS_PER_PAGE);

// 4) Build URLs for prev/next
const base = `/category/${category}`;
const prevHref = currentPage <= 2 ? base : `${base}/page/${currentPage - 1}`;
const nextHref = currentPage < totalPages ? `${base}/page/${currentPage + 1}` : undefined;
const showPrev = currentPage > 1;
const showNext = currentPage < totalPages;

// 5) Build pageData for your Pagination component
const pageData = {
  data: paginated,
  url: {
    current: `${base}/page/${currentPage}`,
    prev: showPrev ? prevHref : undefined,
    next: showNext ? nextHref : undefined,
  },
  currentPage,
  lastPage: totalPages,
  size: POSTS_PER_PAGE,
  total: posts.length,
};

// 6) Decide grid vs list mode based on category slug
const isGrid = ["review", "reviews"].includes(category);

if (currentPage < 1 || currentPage > totalPages) {
  throw Astro.error(404, "Page not found");
}

---

<BlogLayout
  title={`Category: ${category.replace(/-/g, " ")} – Page ${currentPage}`}
  description={`Page ${currentPage} of ${totalPages} for ${category.replace(/-/g, " ")} on ${SiteOptions.siteTitle}`}
>
  <Fragment slot="head">
    {showPrev && <link rel="prev" href={prevHref} />}
    {showNext && nextHref && <link rel="next" href={nextHref} />}
  </Fragment>

  <Header showTitle />

  <h1 class="text-3xl font-bold mb-8 text-center capitalize">
    Category: {category.replace(/-/g, " ")}
  </h1>

  {
    isGrid ?
    (
      <ul class="grid grid-cols-1 lg:grid-cols-2 gap-x-6 gap-y-6">
        {paginated.map((post) => (
          <PostCard post={post} />
        ))}
      </ul>
    ) :
    (
      <ul class="space-y-4">
        {paginated.map((post) => (
          <li>
            <PostCard post={post} />
          </li>
        ))}
      </ul>
    )
  }

  <Pagination page={pageData} />
  <Footer />
</BlogLayout>